Question: Is het mogelijk om de content van de structs aan te passen? Waarom zou dit zo zijn?

Answer: Yes, as seen in the example on the site below. This would probably be the case because otherwise you'd have to marshal it, change it in the JSON string and unmarshal it.
        Ease of programming!
https://stackoverflow.com/questions/47357201/how-to-modify-struct-fields-in-golang/47357229


Code:

package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// Data declaration part:

// BuienRadarData struct:
type BuienRadarData struct { /*
		ID         string `json:"$id"`
	*/Buienradar struct { /*
			ID        string `json:"$id"`
			Copyright string `json:"copyright"`
			Terms     string `json:"terms"`
		*/
	} `json:"buienradar"`
	Actual struct { /*
			ID                  string `json:"$id"`
			Actualradarurl      string `json:"actualradarurl"`
			Sunrise             string `json:"sunrise"`
			Sunset              string `json:"sunset"`*/
		Stationmeasurements []struct { /*
				ID                   string  `json:"$id"`
				Stationid            int     `json:"stationid"`
				Stationname          string  `json:"stationname"`
				Lat                  float64 `json:"lat"`
				Lon                  float64 `json:"lon"`
				Regio                string  `json:"regio"`
				Timestamp            string  `json:"timestamp"`
				Weatherdescription   string  `json:"weatherdescription"`
				Iconurl              string  `json:"iconurl"`
				GraphURL             string  `json:"graphUrl"`
				Winddirection        string  `json:"winddirection,omitempty"`
				Temperature          float64 `json:"temperature,omitempty"`
				Groundtemperature    float64 `json:"groundtemperature,omitempty"`
				Feeltemperature      float64 `json:"feeltemperature,omitempty"`
				Windgusts            float64 `json:"windgusts,omitempty"`
				Windspeed            float64 `json:"windspeed,omitempty"`
				WindspeedBft         int     `json:"windspeedBft,omitempty"`
				Humidity             float64 `json:"humidity,omitempty"`
				Precipitation        float64 `json:"precipitation,omitempty"`
				Sunpower             float64 `json:"sunpower,omitempty"`
				RainFallLast24Hour   float64 `json:"rainFallLast24Hour,omitempty"`
				RainFallLastHour     float64 `json:"rainFallLastHour,omitempty"`
				Winddirectiondegrees int     `json:"winddirectiondegrees,omitempty"`
				Airpressure          float64 `json:"airpressure,omitempty"`
				Visibility           float64 `json:"visibility,omitempty"`
			*/
		} // `json:"stationmeasurements"`
	} `json:"actual"`
	Forecast struct {
		//	ID            string `json:"$id"`
		Weatherreport struct { /*
				ID        string `json:"$id"`
				Published string `json:"published"`
				Title     string `json:"title"`
				Summary   string `json:"summary"`
				Text      string `json:"text"`
				Author    string `json:"author"`
				Authorbio string `json:"authorbio"`
			*/
		} `json:"weatherreport"`
		Shortterm struct { /*
				ID        string `json:"$id"`
				Startdate string `json:"startdate"`
				Enddate   string `json:"enddate"`
				Forecast  string `json:"forecast"`
			*/
		} `json:"shortterm"`
		Longterm struct { /*
				ID        string `json:"$id"`
				Startdate string `json:"startdate"`
				Enddate   string `json:"enddate"`
				Forecast  string `json:"forecast"`
			*/
		} `json:"longterm"`
		Fivedayforecast []struct {
			ID                 string  `json:"$id"`
			Day                string  `json:"day"`
			Mintemperature     string  `json:"mintemperature"`
			Maxtemperature     string  `json:"maxtemperature"`
			MintemperatureMax  int     `json:"mintemperatureMax"`
			MintemperatureMin  int     `json:"mintemperatureMin"`
			MaxtemperatureMax  int     `json:"maxtemperatureMax"`
			MaxtemperatureMin  int     `json:"maxtemperatureMin"`
			RainChance         int     `json:"rainChance"`
			SunChance          int     `json:"sunChance"`
			WindDirection      string  `json:"windDirection"`
			Wind               int     `json:"wind"`
			MmRainMin          float64 `json:"mmRainMin"`
			MmRainMax          float64 `json:"mmRainMax"`
			Weatherdescription string  `json:"weatherdescription"`
			Iconurl            string  `json:"iconurl"`
		} `json:"fivedayforecast"`
	} `json:"forecast"`
}

func main() {
	// Retrieve the data and put it in bs []byte:
	bs := retrieveDatafromURL("https://data.buienradar.nl/2.0/feed/json")
	// Put the data in the struct Data:
	Data := retrieveStructs(bs)
	// Print the min and max temperature for tomorrow:
	fmt.Println("Min and max for tomorrow:")
	fmt.Printf("%+v\n%+v\n", Data.Forecast.Fivedayforecast[0].Mintemperature, Data.Forecast.Fivedayforecast[0].Maxtemperature)
	// Print the min and max temperature for the day after tomorrow:
	fmt.Println("Min and max for the day after tomorrow:")
	fmt.Printf("%+v\n%+v\n", Data.Forecast.Fivedayforecast[1].Mintemperature, Data.Forecast.Fivedayforecast[1].Maxtemperature)
	// Print the wind power for the day after tomorrow:
	fmt.Println("Wind power for the day after tomorrow:")
	fmt.Printf("%+v\n", Data.Forecast.Fivedayforecast[1].Wind)
	// Print whether I need a jacket for the rain tomorrow:
	fmt.Println("Jacket for the rain tomorrow:")
	if Data.Forecast.Fivedayforecast[0].MmRainMin >= 5 {
		fmt.Println("Yes!!")
	} else {
		fmt.Println("Nawh, you ain't made of sugar!")
	}
	// Bepaal voor de komende 5 dagen de minimale temperatuur, de maximale temperatuur, de gemiddelde minimale neerslag, gemiddelde maximale neerslag en de meest voorkomende windrichting.
	for i := 1; i <= 5; i++ {
		if i == 1 {
			fmt.Printf("Day %v (Tomorrow)\n", i)
		} else {
			fmt.Printf("Day %v\n", i)
		}
		fmt.Printf("\tMin temp: %v\n", Data.Forecast.Fivedayforecast[i-1].Mintemperature)
		fmt.Printf("\tMax temp: %v\n", Data.Forecast.Fivedayforecast[i-1].Maxtemperature)
		fmt.Printf("\tMin neerslag: %v\n", Data.Forecast.Fivedayforecast[i-1].MmRainMin)
		fmt.Printf("\tMax neerslag: %v\n", Data.Forecast.Fivedayforecast[i-1].MmRainMax)
		fmt.Printf("\tWindrichting: %v\n", Data.Forecast.Fivedayforecast[i-1].WindDirection)
	}
}

// retrieveDatafromURL retrieves data from a URL:
func retrieveDatafromURL(url string) []byte {
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()
	body, err2 := ioutil.ReadAll(resp.Body)
	if err2 != nil {
		fmt.Println(err2)
	}
	return body
}

// retrieveStructs unmarshals json into golang struct:
func retrieveStructs(byteValue []byte) BuienRadarData {
	var buienRadarData BuienRadarData
	json.Unmarshal([]byte(byteValue), &buienRadarData)
	return buienRadarData
}
